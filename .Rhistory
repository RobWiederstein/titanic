fit.rf <- train(form = form,
data = training,
method = "rf",
tuneLength = 15,
metric = "Accuracy",
trControl = ctrl
)
fit.rf
plot(fit.rf)
rfClasses <- predict(fit.rf, newdata = testing)
length(rfClasses)
rfClasses[1:100]
rfClasses[1:500]
rfClasses[500:1014]
names(full)
full <- read.csv("./full_titanic.csv", header = T, stringsAsFactors = T)
full$Deck <- as.character(levels(full$Deck))[full$Deck]
full$Deck <- as.factor(full$Deck)
names(full)
full$PassengerId[1:100]
tail(full$PassengerId)
training <- full[grep("[A-Z]", full$Deck), ]
testing <-  full[-grep("[A-Z]", full$Deck), ]
seed <- 7
ctrl <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = T
#summaryFunction = twoClassSummary
)
set.seed(seed = seed)
form <- Deck ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Child + Mother
fit.rf <- train(form = form,
data = training,
method = "rf",
tuneLength = 3,
metric = "Accuracy",
trControl = ctrl
)
fit.rf
plot(fit.rf)
md.pattern(training)
rfClasses <- predict(fit.rf, newdata = testing)
rfClasses
rfProbs <- predict(fit.rf, newdata = testing, type = "prob")
confusionMatrix(data = rfClasses, testing$Deck)
training$Deck <- rfClasses
testing$Deck <- rfClasses
full <- rbind(testing, training)
full$PassengerId[1:100]
write.csv(full, file = "full_titanic_w_missing_deck_values.csv", row.names = F)
source('~/Dropbox/R-Projects/titanic/machine_learning.R')
write.csv(full, file = "full_titanic.csv", row.names = F)
full <- read.csv("./full_titanic.csv", header = T)
train <- full[1:891,]
test <- full[892:1309,]
set.seed(754)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
savePredictions = "final",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
metric <- "ROC"
set.seed(754)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
str(train)
str(full)
full$Survived <- as.factor(full$Survived)
train <- full[1:891,]
test <- full[892:1309,]
set.seed(754)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
savePredictions = "final",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
metric <- "ROC"
set.seed(754)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
str(training)
str(train)
sum(is.na(train$Survived))
sum(is.na(test$Survived))
full <- read.csv("./full_titanic.csv", header = T)
train <- full[1:891,]
test <- full[892:1309,]
set.seed(754)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
savePredictions = "final",
classProbs = TRUE,
#summaryFunction = twoClassSummary
)
metric <- "Accuracy"
set.seed(754)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
#savePredictions = "final",
#classProbs = TRUE,
#summaryFunction = twoClassSummary
)
metric <- "Accuracy"
set.seed(754)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Deck + Mother + Child
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
md.pattern(train)
table(train$Deck)
sum(table(train$Deck))
full <- read.csv("./full_titanic_w_missing_deck_values.csv",
header = T, stringsAsFactors = T)
full$Deck <- as.character(levels(full$Deck))[full$Deck]
full$Deck <- as.factor(full$Deck)
training <- full[grep("[A-Z]", full$Deck), ]
testing <-  full[-grep("[A-Z]", full$Deck), ]
source('~/Dropbox/R-Projects/titanic/predict_deck_values.R')
full <- read.csv("./full_titanic.csv", header = T)
md.pattern(full)
train <- full[1:891,]
test <- full[892:1309,]
md.pattern(train)
md.pattern(full)
train <- full[1:891,]
md.pattern(train)
test <- full[is.na(full$Survived)]
test <- full[is.na(full$Survived), ]
train <- full[-is.na(full$Survived), ]
is.na(full$Survived)
-is.na(full$Survived)
na.omit(full$Survived)
-na.omit(full$Survived)
train <- full[-na.omit(full$Survived), ]
test <- full[na.omit(full$Survived)]
full <- read.csv("./full_titanic.csv", header = T)
full$Survived
is.na(full$Survived)
na.omit(full$Survived)
length(na.omit(full$Survived))
?na.omit
present <- na.omit(full$Survived)
dim(full[present, ])
train <- full[is.na(full$Survived),]
test <- full[is.na(full$Survived),]
train <- full[-is.na(full$Survived, ]
train <- full[-is.na(full$Survived), ]
setdiff(train$PassengerId, full$PassengerId)
setdiff(test$PassengerId, full$PassengerId)
test$PassengerId
?setdiff
setdiff(full$PassengerId, test$PassengerId)
keep <- setdiff(full$PassengerId, test$PassengerId)
train <- full[keep, ]
md.pattern(train)
md.pattern(full)
full <- full[order(full$PassengerId), ]
train <- full[1:891, ]
md.pattern(train)
test <- full[892: nrow(full), ]
md.pattern(test)
set.seed(754)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
#savePredictions = "final",
#classProbs = TRUE,
#summaryFunction = twoClassSummary
)
metric <- "Accuracy"
set.seed(754)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Deck + Mother + Child
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
fit.cart <- train(form = form,
data=train, method="rpart", metric=metric, trControl=control)
form <- factor(Survived) ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Deck + Mother + Child
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
str(train)
train$Survived <- as.factor(train$Survived)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Deck + Mother + Child
fit.lda <- train(form = form,
data=train, method="lda", metric=metric, trControl=control)
fit.lda
plot(varImp(fit.lda,scale=F))
set.seed(754)
fit.gbm <- train(form = form,
data=train, method="gbm", metric=metric, trControl=control)
fit.gbm
plot(fit.gbm)
set.seed(754)
fit.svm <- train(form = form,
data=train, method="svmRadial", metric=metric, trControl=control)
set.seed(754)
fit.rf <- train(form = form,
data=train, method="rf", metric=metric, trControl=control)
fit.knn <- train(form = form,
data=train, method="knn", metric=metric, trControl=control)
fit.lrm <- train(form = form,
data=train,
method="vglmAdjCat",
metric=metric,
trControl=control
#nleaves = 50
#ntrees = 200
)
fit.cart <- train(form = form,
data=train, method="rpart", metric=metric, trControl=control)
results <- resamples(list(lda = fit.lda,
cart = fit.cart,
knn = fit.knn,
svm = fit.svm,
rf = fit.rf,
gbm = fit.gbm,
glm = fit.glm,
lrm = fit.lrm
)
)
set.seed(754)
fit.glm <- train(form = form,
data=train, method="glm", metric=metric, trControl=control)
results <- resamples(list(lda = fit.lda,
cart = fit.cart,
knn = fit.knn,
svm = fit.svm,
rf = fit.rf,
gbm = fit.gbm,
glm = fit.glm,
lrm = fit.lrm
)
)
sults <- summary(results)
dotplot(results)
modelCor(results)
fit.lrm <- train(form = form,
data=train,
method="vglmAdjCat",
metric=metric,
trControl=control
)
fit.vgl <- train(form = form,
data=train,
method="vglmAdjCat",
metric=metric,
trControl=control
)
fit.lrm <- train(form = form,
data=train,
method="vglmAdjCat",
metric=metric,
trControl=control
#nleaves = 50
#ntrees = 200
)
fit.lb <- train(form = form,
data=train,
method="LogitBoost",
metric=metric,
trControl=control
)
fit.lss <- train(form = form,
data=train,
method="lssvmPoly",
metric=metric,
trControl=control
)
fit.qda <- train(form = form,
data=train,
method="qda",
metric=metric,
trControl=control
)
results <- resamples(list(lda = fit.lda,
cart = fit.cart,
knn = fit.knn,
svm = fit.svm,
rf = fit.rf,
gbm = fit.gbm,
glm = fit.glm,
lrm = fit.lrm,
vgl = fit.vgl,
lb = fit.lb,
lss = fit.lss
)
)
fit.lss <- train(form = form,
data=train,
method="lssvmPoly",
metric=metric,
trControl=control
)
results <- resamples(list(lda = fit.lda,
cart = fit.cart,
knn = fit.knn,
svm = fit.svm,
rf = fit.rf,
gbm = fit.gbm,
glm = fit.glm,
lrm = fit.lrm,
vgl = fit.vgl,
lb = fit.lb,
)
)
results <- resamples(list(lda = fit.lda,
cart = fit.cart,
knn = fit.knn,
svm = fit.svm,
rf = fit.rf,
gbm = fit.gbm,
glm = fit.glm,
lrm = fit.lrm,
vgl = fit.vgl,
lb = fit.lb
)
)
sults <- summary(results)
dotplot(results)
sults
summary(fit.lda)
print(fit.lda)
Prediction <- predict(fit.lda, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
head(submit)
write.csv(submit, file = "2016-10-06-08-37-Solution.csv", row.names = FALSE)
importance(fit.rf)
summary(fit.gbm)
algorithmList <- c("lda", "vglmAdjCat" , "gbm", "svm", "lrm")
set.seed(754)
models <- caretList(form = form,
data=train,
trControl=control,
methodList=algorithmList)
algorithmList <- c("lda", "vglmAdjCat" , "gbm", "svmRadial", "vglmAdjCat")
set.seed(754)
models <- caretList(form = form,
data=train,
trControl=control,
methodList=algorithmList)
results <- resamples(models)
dotplot(results)
results
names(models)
algorithmList <- c("lda", "vglmAdjCat" , "gbm", "svmRadial", "rf")
set.seed(754)
models <- caretList(form = form,
data=train,
trControl=control,
methodList=algorithmList)
results <- resamples(models)
dotplot(results)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE,
classProbs=TRUE
)
set.seed(754)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE,
classProbs=TRUE
)
set.seed(754)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
set.seed(754)
stack.rf <- caretStack(models, method="rf", metric="Accuracy", trControl=stackControl)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE
#classProbs=TRUE
)
set.seed(754)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
#savePredictions=TRUE
#classProbs=TRUE
)
set.seed(754)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
stackControl <- trainControl(method="repeatedcv",
number=10,
repeats=3,
savePredictions=TRUE,
classProbs=TRUE
)
set.seed(754)
stack.glm <- caretStack(models, method="glm", metric="Accuracy", trControl=stackControl)
print(stack.glm)
?stackControl
?trainControl
setwd("~/Dropbox/R-Projects/tutorials")
v <- c("a 123", "b  2")
rgrep <- function(pattern, words){
grep(pattern, words, perl = T, value = T)
}
rgrep("[1-9]$")
rgrep("[1-9]$", v)
rgrep("[1-9]*[1-9]$", v)
rgrep(" *[1-9]*[1-9]$", v)
v <- c("a 123", "b  2", "c2", "d")
rgrep(" *[1-9]*[1-9]$", v)
rgrep(" +[1-9]*[1-9]$", v)
gsub["^[a-z]", "", v]
gsub["^[a-z]", "", v)
gsub("^[a-z]", "", v)
gsub("^[a-z] +", "", v)
v <- c("a 123", "b  2", "c2", "d", "qq 1")
gsub("^[a-z]+ +", "", v)
full <- read.csv("./full_titanic.csv", header = T)
setwd("~/Dropbox/R-Projects/titanic")
full <- read.csv("./full_titanic.csv", header = T)
full <- full[order(full$PassengerId), ]
train <- full[1:891, ]
test <- full[892: nrow(full), ]
set.seed(754)
control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
#savePredictions = "final",
#classProbs = TRUE,
#summaryFunction = twoClassSummary
)
metric <- "Accuracy"
set.seed(754)
train$Survived <- as.factor(train$Survived)
form <- Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare +
Embarked + Title + FsizeD + TicketNew + Deck + Mother + Child
fit.lasso <- train(form = form,
data = train,
method = "lasso",
metric = metric
trControl = control
)
fit.lasso <- train(form = form,
data = train,
method = "lasso",
metric = metric,
trControl = control
)
source('~/Dropbox/R-Projects/titanic/leek_ensemble.R')
set.seed(754)
fit.rf <- train(form = form,
data=train, method="rf", metric=metric, trControl=control)
pred1 <- predict(fit.lda, test)
pred2 <- predict(fit.rf, test)
qplot(pred1, pred2, data = test)
library(ggplot2)
qplot(pred1, pred2, data = test)
predDf <- data.frame(pred1, pred2, test$Survived)
combModFit <- train(Survived ~ ., method = "gam", data = predDf)
head(predDf)
predDf <- data.frame(pred1, pred2, Survived = test$Survived)
combModFit <- train(Survived ~ ., method = "gam", data = predDf)
head(predDf)
head(pred1)
head(pred2)
head(predDf)
combModFit <- train(Survived ~ ., method = "gam", data = predDf)
library(ISLR); data(Wage); library(ggplot2); library(caret);
Wage <- subset(Wage,select=-c(logwage))
inBuild <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage,
p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
mod1 <- train(wage ~.,method="glm",data=training)
mod2 <- train(wage ~.,method="rf",
data=training,
trControl = trainControl(method="cv"),number=3)
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
graphics.off()
qplot(pred1,pred2,colour=wage,data=testing)
combModFit <- train(wage ~.,method="gam",data=predDF)
predDF <- data.frame(pred1,pred2,wage=testing$wage)
combModFit <- train(wage ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
head(predDF)
head(testing)
head(predDF)
